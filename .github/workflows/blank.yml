name: oidc-poc

on:
  push:
    branches:
      - '*'

jobs:
  auth:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - name: Get ID Token
        id: get_id_token
        run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=jfrog-github" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV

      - name: Exchange ID Token for Access Token
        id: get_access_token
        env:
          ID_TOKEN: ${{ env.ID_TOKEN }}
          JFROG_PLATFORM_URL: https://hts2.jfrog.io
        run: |
          ACCESS_TOKEN=$(curl -X POST -H "Content-Type: application/json" "${JFROG_PLATFORM_URL}/access/api/v1/oidc/token" \
          -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"ashritha\"}" | jq .access_token | tr -d '"')
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Install Internal Package
        run: |
          pip install hatch-showcase

      - name: Upload Package to JFrog
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
          REPO_URL: "https://hts2.jfrog.io/artifactory/api/pypi/dev-pypi-local/"
        run: |
          PACKAGE_PATH=$(pip show hatch-showcase | grep Location | cut -d ' ' -f 2)  # Get installation directory
          for file in "${PACKAGE_PATH}/hatch_showcase/"*; do
            if [[ -f "$file" ]]; then  # Check if the file exists
              echo "Uploading $file..."
              response=$(curl -X POST -H "Authorization: Bearer ${ACCESS_TOKEN}" -H "Content-Type: application/octet-stream" -T "$file" "${REPO_URL}$(basename "$file")" 2>&1)
              echo "$response"
              if [[ $? -ne 0 ]]; then
                echo "Error uploading $file: $response"
                exit 1
              fi
            else
              echo "File $file does not exist."
            fi
          done
